链表算法：快行指针
    指的是用两个指针来循环链表，一个指针比另一个超前一些。往往都是先行固定的步数。

例如：有一个链表，a1->a2->a3...->an->b1->b2->b3->b4...->bn,我们想把他排成：  a1->b1->a2->b2....->an->bn,另外你还不知道这个链表的长度。

思路： 用两个指针，p1每次都向前移动两步，p2只向前面移动一次，当p1到达链表最后时，
p2正好在链表的中间位置，然后 ，再让p1与p2一步一步从后向前反向移动。并将p2指向的结点插入到p1所指结点后面。



以下为程序，请给出你的代码：
2. 编写代码，移除没有排过序的链表中的重复结点？
    思路： 方案一： 可以直接访问整个链表，将每个结点加入散列表，若发现重复元素则将该结点从链表中移除，然后继续。
        方案二： 不使用缓存散列表，则可以用两个指针来循环，p1循环整个链表，p2检查后续的结点是否有重复。
        
        
3. 实现一个算法，找出单向链表中倒数第n个结点。
     思路： 使用两个指针，开始时，它们都指向链表的首结点，然后将p2指针向前移动n个结点，
           之后，以同样的速度移动这两个指针，p2会在移动length-n后到达链表的最后，此时，p1会指向链表倒数第n个结点
           
4. 以给定值x 为基准将链表分为两个部分，所有小于x的结点排在大于或等于x的结点之前。 
   思路： 创建两个链表，一个链表存小于x的元素，一个链表存大于或等于x的元素.
      循环整个链表，将元素插入两个链表，当到达链表最后，则表明拆分完成，再合并两个链表。 
                 